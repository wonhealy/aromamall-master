window.addEventListener('load', (e) => {
  var option = {
    // Global settings:
    disable: false, // accepts following values: 'phone', 'tablet', 'mobile', boolean, expression or function
    startEvent: 'DOMContentLoaded', // name of the event dispatched on the document, that AOS should initialize on
    initClassName: 'aos-init', // class applied after initialization
    animatedClassName: 'aos-animate', // class applied on animation
    useClassNames: false, // if true, will add content of `data-aos` as classes on scroll
    disableMutationObserver: false, // disables automatic mutations' detections (advanced)
    debounceDelay: 50, // the delay on debounce used while resizing window (advanced)
    throttleDelay: 0, // the delay on throttle used while scrolling the page (advanced)
    // Settings that can be overridden on per-element basis, by `data-aos-*` attributes:
    offset: 120, // offset (in px) from the original trigger point
    delay: 0, // values from 0 to 3000, with step 50ms
    duration: 1200, // values from 0 to 3000, with step 50ms
    easing: 'ease', // default easing for AOS animations
    once: false, // whether animation should happen only once - while scrolling down
    mirror: true, // whether elements should animate out while scrolling past them
    anchorPlacement: 'top-bottom', // defines which position of the element regarding to window should trigger the animation
  }

  var scrollTarget = getScrollParent(document.body.querySelector('.edibot-product-detail'));
  if (scrollTarget) {
    option.scrollTarget = scrollTarget;
  }

  AOS.init(option);
  AOS.refresh();
  var aEdiImageElemList = document.querySelectorAll('.edibot-product-detail img');
  for (var i = 0; i < aEdiImageElemList.length; i++) {
    aEdiImageElemList[i].addEventListener('load', aosrefresh);
  }
  function aosrefresh(e) {
    AOS.refresh();
  }

  function getScrollParent(node) {
    var parent = node.parentNode;
    while (parent) {
      if (parent === document.body || parent === document.documentElement) {
        return null;
      }

      /*
      if (parent === document.body) {
        var childTotalHeight = Array.from(document.body.children)
          .filter((children) => children.clientHeight > 0)
          .filter((children) => {
            var css = getComputedStyle(children);
            if (css.float === 'left' || css.float === 'right') {
              return false;
            }
            if (css.position === 'fixed' || css.position === 'absolute') {
              return false;
            }
          
            return true;
          })
          .reduce((acc, children) => {
              acc += children.clientHeight;
              return acc;
          }, 0);

          if (document.body.clientHeight === childTotalHeight) {
            return null;
          }
      }
      */

      if (parent.scrollHeight > 0 && parent.scrollHeight > parent.clientHeight) {
        var overflowStyle = getComputedStyle(parent).overflowY;
        if (overflowStyle !== 'visible' && overflowStyle !== 'hidden') {
          return parent;
        }
      }
      parent = parent.parentNode;
    }
    return null;
  }
});